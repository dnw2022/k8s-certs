{{- if .Values.IngressEnabled -}}
{{- range $domainName := $.Values.Domains }}
{{- $domainNameWithoutDots := regexReplaceAll "\\." $domainName "-" -}}
{{- $testDomainName := print "test." $domainName -}}
{{- $testDomainNameWithoutDots := print "test-" $domainName -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: default-{{ $domainNameWithoutDots }}-ingress
  namespace: '{{ $.Values.IngressNamespace }}'
  annotations:
    # https://istio.io/latest/docs/tasks/traffic-management/ingress/kubernetes-ingress/
    # Should be possible to just replace this one with an IngressClass for the istio gateway
    # kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/use-regex: 'true'
    # Rewrite url to always go to /
    # This metadata will only apply to the rules mentioned in this file
    # Othe Ingress services can have their own annotations
    nginx.ingress.kubernetes.io/rewrite-target: /
    # By setting the cluster-issuer the shim will not automatically create certs
    # When adding other ingress services you will usually not specify this annotation
    # That means that the default wildcard certificate will be used
    cert-manager.io/cluster-issuer: '{{ $.Values.CertIssuer }}'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
spec:
  # https://istio.io/latest/docs/tasks/traffic-management/ingress/kubernetes-ingress/
  # for the istio gateway:
  ingressClassName: 'nginx'
  tls:
  - hosts:
    - '*.{{ $domainName }}'
    - '{{ $domainName }}'
    # For the istio gateway to use this the secret
    # it must be in the same namespace as the istio-ingress-gateway (normally istio-system)
    # Cert-manager can still be used to get and renew certificates 
    # But note that the certificates themselves need to be created in the namespace of the 
    # istio-ingress-gateway as well. See: https://istio.io/latest/docs/ops/integrations/certmanager/ 
    secretName: {{ $domainNameWithoutDots }}-wildcard-tls
  rules:
    - host: '*.{{ $domainName }}'
      http:
        paths:
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: {{ $.Values.BackendService }}
                port:
                  number: {{ $.Values.BackendPort }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $testDomainNameWithoutDots }}-ingress
  namespace: '{{ $.Values.IngressNamespace }}'
  annotations:
    # kubernetes.io/ingress.class: 'nginx'
    nginx.ingress.kubernetes.io/use-regex: 'true'
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    # Since the tls section has been commented out and we rely on the wildcard certificate this is not needed anymore
    # cert-manager.io/cluster-issuer: 'letsencrypt-prod'
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
spec:
  ingressClassName: '{{ $.Values.IngressClassName }}'
  # Leaving this here in combination with the cert-manager.io/cluster-issuer annotation will issue a new tls certificate for {{$testDomainName}}
  # By leaving is out we can use the generic Ingress configuration and default TLS certificate for *.{{ $domainName }}
#  tls:
#    - hosts:
#        - {{ $testDomainName }}
#      secretName: {{ $testDomainNameWithoutDots }}-tls
  rules:
    - host: {{ $testDomainName }}
      http:
        paths:
          - path: /?(.*)
            pathType: Prefix
            backend:
              service:
                name: {{ $.Values.BackendService }}
                port:
                  number: {{ $.Values.BackendPort }}
---
{{- end }}
{{- end }}