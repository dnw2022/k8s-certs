name: Deploy to Azure Kubernetes Engine (AKS)

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  AKS_CLUSTER_NAME: 'cluster-dnw-aks'
  AKS_RESOURCE_GROUP: 'rg-dnw'
  AKS_ACR_NAME: 'acrdnw'
  AKS_ACR_LOGIN_SERVER: 'acrdnw.azurecr.io'
  RELEASE_NAME: default-backend
  TAG: latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # https://github.com/Azure/login
      # Also see for the SP creation: https://github.com/Azure/login#configure-deployment-credentials
      # The scope is necessary
      # Creating the SP like this
      # az ad sp create-for-rbac --name $AKS_SERVICE_PRINCIPAL_NAME --role $AKS_CONTRIBUTOR_ROLE_NAME 
      # And afterwars using az role assignment create did not work
      # Probably because the scope is needed to create the full json
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-azure-cli
      - name: Build images and push them to Azure Container Service (ACR)
        run: |-
          az acr login --name $AKS_ACR_NAME
          ACR_TAG="${{ env.AKS_ACR_LOGIN_SERVER }}/${{ env.RELEASE_NAME }}:${{ env.TAG }}"
          docker build -t $ACR_TAG -f ./default-backend/Dockerfile ./default-backend
          docker push $ACR_TAG
          az acr repository list --name $AKS_ACR_NAME --output table

      # https://github.com/Azure/setup-kubectl
      - name: Kubectl tool installer
        uses: Azure/setup-kubectl@v2.0
        with:
          version: 'v1.21.7'

      # https://github.com/Azure/aks-set-context
      # This is a pre-release and it will not show up in the marketplace directly
      # If you go to the marketplace with the link in the repo you will see it
      - name: Set Context for Azure Kubernetes Cluster using azure/aks-set-context@v1 action
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}' 
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}
          resource-group: ${{ env.AKS_RESOURCE_GROUP }}

      - name: Store secrets with certificates in cluster
        run: |-
          # apply yml with the secret containing the dotnet-works.com wildcard cert 
          echo "${{ secrets.DNW_CERT_SECRET }}" | base64 --decode > ./dnw-cert-secret.yml
          kubectl apply -f ./dnw-cert-secret.yml

          # apply yml with the secret containing the freelancedirekt.nl wildcard cert 
          echo "${{ secrets.FLD_CERT_SECRET }}" | base64 --decode > ./fld-cert-secret.yml
          kubectl apply -f ./fld-cert-secret.yml

      # https://github.com/marketplace/actions/helm-tool-installer
      - name: Helm tool installer
        uses: Azure/setup-helm@v2.0

      - name: Deploy to AKS
        run: |-
          helm upgrade default-backend ./k8s/helm/default-backend \
            --set PrivateContainerRegistry="${{ env.AKS_ACR_LOGIN_SERVER }}/" \
            --install
          
          helm upgrade cert-issuers ./k8s/helm/cert-issuers --install
          helm upgrade default-ingress ./k8s/helm/default-ingress --install

          kubectl rollout restart deployment default-backend-deployment